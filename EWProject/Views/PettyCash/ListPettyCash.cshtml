@using Client.Connection;
@model List<Client.Models.Gets.GetListJournalVoucher>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
<title>@ViewData["Title"] - EWSystem</title>
<div class="row mt-1">
    <div class="col-4"><h5>List Of PettyCash</h5></div>
    <div class="col-8">
        @if (Configure.ListOfPermissionsByUser.Where(x =>
                x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsPermission
              && x.IsAllowAdd == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsAllowReadOnly).Count() == 1)
        {
            <a asp-controller="PettyCash" asp-action="Index" asp-route-empID="@HttpContextAccessor.HttpContext.Request.Cookies["EmpID"]" class="btn float-end" style="background-color:#01295C;color:white">
                Add NewData
            </a>
        }
    </div>
</div>
@if (Configure.ListOfPermissionsByUser.Where(x =>
                                     x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsPermission
                                  && x.IsAllowReadOnly == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsAllowReadOnly).Count() == 1)
{
    <div class="row mt-2">
        <div class="col-9">
            <div class="row">
                <div class="col-6">Date From</div>
                <div class="col-6">Date To</div>
            </div>
        </div>
        <div class="col-3">
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-9">
            <div class="row">
                <div class="col-6"><input type="date" value="@(DateTime.Now.ToString("yyyy-MM-01"))" class="form-control" id="txtDateFrom"></div>
                <div class="col-6"><input type="date" value="@(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1).ToString("yyyy-MM-dd"))" class="form-control" id="txtDateTo"></div>
            </div>
        </div>
        <div class="col-3">
            <button class="btn" id="btnExecuteDate" style="float:left;background-color:#01295C;color:white">Execute Data</button>
            <button class="btn" id="btnExportData" style="float:left;background-color:#01295C;color:white;margin-left:5px">Export Excel</button>
        </div>
    </div>
    <div class="table-responsive mt-3">
        <div class="row">
            <div class="col-12">
                <table id="TbListPettyCash" class="table table-striped table-bordered dt-responsive nowrap" width="100%" cellspacing="0" style="background: #f0eff1; color: #696969;">
                    <thead>
                        <tr>
                            <th>@localizer["Action"]</th>
                            <th>@localizer["DocEntry"]</th>
                            <th>@localizer["DocDate"]</th>
                            <th>@localizer["Remarks"]</th>
                            <th>@localizer["Ref1"]</th>
                            <th>@localizer["Total"]</th>
                            <th>@localizer["CreateBy"]</th>
                            <th>@localizer["UpdateBy"]</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @section scripts{
    <script>
        $('#TbListPettyCash thead tr')
            .clone(true)
            .addClass('filters')
            .appendTo('#TbListPettyCash thead');
        $('#TbListPettyCash').DataTable({
            // order: [[1, 'desc']],
            columnDefs: [
                { targets: 2, render: DataTable.render.date() },
            ],
            columns:
                [
                    {
                        render: function (data, type, full, meta) {
                            var template = "<div css='text-start' style='width:150px'>";
                            template += '<button class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="View Detail" style="background-color:#01295C;color:white;margin-right:5px;" onclick="ViewLayout(' + full.docEntry.toString() + ',\'' + full.type.toString() + '\')"><i class="fas fa-print"></i></button>';
                            if (full.statusUpdate !== "C") {
                                let isAllow="0";
                               @if (Configure.ListOfPermissionsByUser.Where(x =>
                                    x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsPermission
                                 && x.IsAllowUpdate == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsAllowReadOnly).Count() == 1)
                                {
                                    @Html.Raw("isAllow='1';")
                                }
                                if (isAllow === "1") {
                                     template += '<button class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Update" style="margin-right:5px;" onclick="ViewUpdate(' + full.docEntry.toString() + ')"><i class="fas fa-edit"></i></button>';
                                }                               
                            }
                            if (full.status !== "C") {
                                let isAllow = "0";
                                @if (Configure.ListOfPermissionsByUser.Where(x =>
                                   x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsPermission
                                   && x.IsAllowCancel == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "PettyCash").First().Properties.IsAllowReadOnly).Count() == 1)
                                {
                                    @Html.Raw("isAllow='1';")
                                }
                                if (isAllow === "1") {
                                    template += '<button class="btn btn-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Cancel" style="margin-right:5px;" onclick="DeleteBookingSheet(' + full.docEntry.toString() + ')"><i class="fas fa-trash"></i></button>';
                                }
                            }
                            template += "</div>";
                            return template;
                        }
                    },
                    { data: "docEntry", autoWidth: true },
                    { data: "docDate", autoWidth: true },
                    { data: "remarks", autoWidth: true },
                    { data: "ref1", autoWidth: true },
                    { data: "total", autoWidth: true },
                    { data: "createBy", autoWidth: true },
                    { data: "updateBy", autoWidth: true },
                ],
            orderCellsTop: true,
            fixedHeader: true,
            initComplete: function () {
                var api = this.api();
                // For each column
                api
                    .columns()
                    .eq(0)
                    .each(function (colIdx) {
                        // Set the header cell to contain the input element
                        var cell = $('.filters th').eq(
                            $(api.column(colIdx).header()).index()
                        );
                        var title = $(cell).text();
                        $(cell).html('<input type="text" placeholder="' + title + '" />');

                        // On every keypress in this input
                        $(
                            'input',
                            $('.filters th').eq($(api.column(colIdx).header()).index())
                        )
                            .off('keyup change')
                            .on('change', function (e) {
                                // Get the search value
                                $(this).attr('title', $(this).val());
                                var regexr = '({search})'; //$(this).parents('th').find('select').val();

                                var cursorPosition = this.selectionStart;
                                // Search the column for that value
                                api
                                    .column(colIdx)
                                    .search(
                                        this.value != ''
                                            ? regexr.replace('{search}', '(((' + this.value + ')))')
                                            : '',
                                        this.value != '',
                                        this.value == ''
                                    )
                                    .draw();
                            })
                            .on('keyup', function (e) {
                                e.stopPropagation();

                                $(this).trigger('change');
                                $(this)
                                    .focus()[0]
                                    .setSelectionRange(cursorPosition, cursorPosition);
                            });
                    });
            },
            scrollCollapse: true,
            scrollX: true,
            scrollY: 500
        });
        function ViewLayout(docEntry, type) {
            window.open('@Url.Action("ViewDetailPettyCashByDocEntry","PettyCash")?docEntry=' + docEntry + '&type=' + type,"_blank");
        }
        function ViewUpdate(docEntry) {
            window.open('@Url.Action("EditDraftPettyCash","PettyCash")?docEntry=' + docEntry + '&empID=@HttpContextAccessor.HttpContext.Request.Cookies["EmpID"]',"_blank");
        }
        function DeleteBookingSheet(docNum) {
            if (confirm("Do you to Cancel this transaction?")) {
                $.ajax({
                    url: '@Url.Action("OnCancelDraft","PettyCash")',
                    type: "DELETE",
                    data: { docEntry: docNum },
                    dataType: "JSON",
                    beforeSend: function () {
                        $('#Modalloder').modal('show');
                    },
                    success: function (data) {
                        $('#Modalloder').modal('hide');
                        $('#ModalSuccess').modal('show');
                        $('#ErrMsg').html("Success");
                        window.location.href = '@Url.Action("ListPettyCash","PettyCash")';
                    },
                    error: function (erro) {
                        $('#Modalloder').modal('hide');
                        $('#ModalSuccess').modal('show');
                        $('#ErrMsg').html(erro.responseText);
                    }
                });
            }
        }
        var listData = [];
        onLoadingDataTable(@Json.Serialize(Model));
        $("#btnExecuteDate").click(function () {
            $.ajax({
                url: '@Url.Action("GetListPettyCash","PettyCash")',
                type: "GET",
                data: {
                    dateFrom: $("#txtDateFrom").val(),
                    dateTo: $("#txtDateTo").val(),
                    type: 'ALL',
                },
                dataType: "JSON",
                beforeSend: function () {
                    $('#Modalloder').modal('show');
                },
                success: function (data) {
                    $('#Modalloder').modal('hide');
                    onLoadingDataTable(data.data);
                },
                error: function (erro) {
                    $('#Modalloder').modal('hide');
                    $('#ModalSuccess').modal('show');
                    $('#ErrMsg').html(erro.responseText);
                }
            });
        });
        function onLoadingDataTable(data) {
            listData = [];
            listData = data;
            var tbListItemLine = $('#TbListPettyCash').DataTable();
            tbListItemLine.clear();
            tbListItemLine.rows.add(data);
            tbListItemLine.search("").columns().search("").draw();
        }
        $("#btnExportData").click(function () {
            $.ajax({
                url: '@Url.Action("OnExportDataOfPettyCash","PettyCash")',
                type: "POST",
                data: {
                    getBookingSheetExports: JSON.stringify(listData)
                },
                dataType: "JSON",
                beforeSend: function () {
                    $('#Modalloder').modal('show');
                },
                success: function (data) {
                    $('#Modalloder').modal('hide');
                    var sampleArr = base64ToArrayBuffer(data.data);
                    saveByteArray(data.fileName, sampleArr, data.applicationType);
                },
                error: function (erro) {
                    $('#Modalloder').modal('hide');
                    $('#ModalSuccess').modal('show');
                    $('#ErrMsg').html(erro.responseText);
                }
            });
        });
        function base64ToArrayBuffer(base64) {
            //var binaryString = window.atob(base64);
            var binaryString = atob(base64);
            var binaryLen = binaryString.length;
            var bytes = new Uint8Array(binaryLen);
            for (var i = 0; i < binaryLen; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;;
        }
        function saveByteArray(reportName, byte, type) {
            var blob = new Blob([byte], { type: type });
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            var fileName = reportName;
            link.download = fileName;
            link.click();
            link.remove();
        };
    </script>
}
}
