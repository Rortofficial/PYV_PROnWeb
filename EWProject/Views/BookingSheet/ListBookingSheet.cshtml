@using Client.Connection;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@model List<Client.Models.Gets.GetBookingSheetByUser>
@{
    Configure.GetAllPermission(HttpContextAccessor.HttpContext.Request.Cookies["ID"]);
}
<title>@ViewData["Title"] - EWSystem</title>
<style>
    thead input {
        width: 100%;
    }
</style>
@if (Configure.ListOfPermissionsByUser.Where(x =>
                          x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsPermission
                       && x.IsAllowAdd == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsAllowReadOnly).Count() == 1)
{
    <div class="row mt-1">
        <div class="col-4"><h5><u>@localizer["List Of Booking Sheet"]</u></h5></div>
        <div class="col-8">
            <a asp-controller="BookingSheet" asp-action="Index" class="btn float-end" style="background-color:#01295C;color:white">
                @localizer["Add NewData"]
            </a>
        </div>
    </div>
}
@if (Configure.ListOfPermissionsByUser.Where(x =>
                x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsPermission
             && x.IsAllowReadOnly == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsAllowReadOnly).Count() == 1)
{
    <div class="row mt-2">
        <div class="col-9">
            <div class="row">
                <div class="col-6">@localizer["Date From"]</div>
                <div class="col-6">@localizer["Date To"]</div>
            </div>
        </div>
        <div class="col-3">
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-9">
            <div class="row">
                <div class="col-6"><input type="date" value="@(DateTime.Now.ToString("yyyy-MM-01"))" class="form-control" id="txtDateFrom"></div>
                <div class="col-6"><input type="date" value="@(new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1).ToString("yyyy-MM-dd"))" class="form-control" id="txtDateTo"></div>
            </div>
        </div>
        <div class="col-3">
            <button class="btn" id="btnExecuteDate" style="float:left;background-color:#01295C;color:white">@localizer["Execute Data"]</button>
            <button class="btn" id="btnExportData" style="float:left;background-color:#01295C;color:white;margin-left:5px">@localizer["Export Excel"]</button>
        </div>
    </div>
    <div class="table-responsive mt-3">
        <div class="row">
            <div class="col-12">
                @*nowrap*@
                <table id="TbListBookingSheet" class="table table-striped table-bordered dt-responsive table-condensed display" width="100" cellspacing="0" style="background: #f0eff1; color: #696969;">
                    <thead>
                        <tr>
                            <th>@localizer["Action"]</th>
                            <th>@localizer["JOB NO."]</th>
                            <th>@localizer["BOOKING DATE"]</th>
                            <th>@localizer["LOADING DATE"]</th>
                            <th>@localizer["ETA DATE"]</th>
                            <th>@localizer["Shipment Type"]</th>
                            <th>@localizer["CONTAINER TYPE"]</th>
                            <th>@localizer["TRUCK TYPE"]</th>
                            <th>@localizer["Shipper"]</th>
                            <th>@localizer["Consignee"]</th>
                            <th>@localizer["C/O"]</th>
                            <th>@localizer["ROUTE"]</th>
                            <th>@localizer["STATUS"]</th>
                            <th>@localizer["Invoice Number"]</th>
                            <th>@localizer["Sale Person"]</th>
                            <th>@localizer["Create By"]</th>
                            <th>@localizer["Update By"]</th>
                            <th>@localizer["UPDATE DATE"]</th>
                            <th>@localizer["CREATE TIME"]</th>
                            <th>@localizer["UPDATE TIME"]</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @section scripts{
    <script>
        var listData = [];
        var checkingIscreateObjectURL = 0;
        //$.fn.dataTable.moment('HH:mm MMM D, YY');
        //$.fn.dataTable.moment('dddd, MMMM Do, YYYY');
        $('#TbListBookingSheet thead tr')
            .clone(true)
            .addClass('filters')
            .appendTo('#TbListBookingSheet thead');
        $('#TbListBookingSheet').DataTable({
            columnDefs: [
                { targets: 2, render: DataTable.render.date() },
                { targets: 3, render: DataTable.render.date() },
                { targets: 4, render: DataTable.render.date() },
                { targets: 17, render: DataTable.render.date() },
            ],
            columns:
                [
                    {
                        render: function (data, type, full, meta) {
                            var template = "<div css='text-start' style='width:150px'>";
                            template += '<button class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="View Detail" style="background-color:#01295C;color:white;margin-right:5px;" onclick="ViewLayout(\'View\',' + full.bookingID.toString() + ')"><i class="fas fa-print"></i></button>';
                            let isAllow="0";
                            @if (Configure.ListOfPermissionsByUser.Where(x =>
                                    x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsPermission
                                 && x.IsAllowUpdate == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsAllowUpdate).Count() == 1)
                            {
                                @Html.Raw("isAllow='1';");
                            }
                            if (isAllow === "1") {
                                if (full.statusUpdate == 'O') {//&& full.docStatusCancel != "C"
                                        template += '<button class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Update" style="margin-right:5px;" onclick="ViewLayout(\'Update\',' + full.bookingID + ')"><i class="fas fa-edit"></i></button>';
                                }
                                else if (full.statusUpdate == "I") {
                                        template += '<button class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Update Invoice" style="margin-right:5px;" onclick="ViewLayout(\'UpdateCommodities\',' + full.bookingID + ')"><i class="far fa-file"></i></button>';
                                }
                            }
                            isAllow = "0";
                                @if (Configure.ListOfPermissionsByUser.Where(x =>
                                   x.IsPermission == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsPermission
                                   && x.IsAllowCancel == Client.Connection.Configure.ListOfPermissions.Where(x => x.Key == "BookingSheet_CBT").First().Properties.IsAllowCancel).Count() == 1)
                                {
                                    @Html.Raw("isAllow='1';");
                                }
                                if (isAllow === "1") {
                                    if (full.docStatusCancel != "C") { //full.statusUpdate == "O" &&
                                        template += '<button class="btn btn-danger" data-bs-toggle="tooltip" data-bs-placement="top" title="Cancel" style="margin-right:5px;" onclick="DeleteBookingSheet(' + full.bookingID + ')"><i class="fas fa-trash"></i></button>';
                                    } else {
                                        template += '';
                                    }
                                } 
                            template += "</div>";
                            return template;
                            }, autoWidth: true
                    },
                        //{ data: "docEntry", autoWidth: true },
                        { data: "jobNo", autoWidth: true },
                        {
                            data: "bookingDate",
                            autoWidth: true,
                            //render: function (data, type, full) {
                            //    return moment(full.bookingDate).format('DD/MM/YYYY');
                            //}
                        },
                        { data: "loadingDate", autoWidth: true },
                        { data: "etaRequirementDate", autoWidth: true },
                        { data: "importType", autoWidth: true },
                        { data: "volumn", autoWidth: true },
                        { data: "containerType", autoWidth: true },
                        { data: "shipper", autoWidth: true },
                        { data: "consignee", autoWidth: true },
                        { data: "co", autoWidth: true },
                        { data: "route", autoWidth: true },
                        { data: "docStatus", autoWidth: true },
                        { data: "commoditys", autoWidth: true },
                        { data: "saleEmployee", autoWidth: true },
                        { data: "createBy", autoWidth: true },
                        { data: "updateBy", autoWidth: true },
                        { data: "updatedate", autoWidth: true },
                        { data: "createtime", autoWidth: true },
                        { data: "updatetime", autoWidth: true },
                    ],
                orderCellsTop: true,
                fixedHeader: true,
                initComplete: function () {
                    var api = this.api();
                    // For each column
                    api
                        .columns()
                        .eq(0)
                        .each(function (colIdx) {
                            // Set the header cell to contain the input element
                            var cell = $('.filters th').eq(
                                $(api.column(colIdx).header()).index()
                            );
                            var title = $(cell).text();
                            $(cell).html('<input type="text" placeholder="' + title + '" />');

                            // On every keypress in this input
                            $(
                                'input',
                                $('.filters th').eq($(api.column(colIdx).header()).index())
                            )
                                .off('keyup change')
                                .on('change', function (e) {
                                    // Get the search value
                                    $(this).attr('title', $(this).val());
                                    var regexr = '({search})'; //$(this).parents('th').find('select').val();

                                    var cursorPosition = this.selectionStart;
                                    // Search the column for that value
                                    api
                                        .column(colIdx)
                                        .search(
                                            this.value != ''
                                                ? regexr.replace('{search}', '(((' + this.value + ')))')
                                                : '',
                                            this.value != '',
                                            this.value == ''
                                        )
                                        .draw();
                                })
                                .on('keyup', function (e) {
                                    e.stopPropagation();

                                    $(this).trigger('change');
                                    $(this)
                                        .focus()[0]
                                        .setSelectionRange(cursorPosition, cursorPosition);
                                });
                        });
                },
                scrollCollapse: true,
                scrollX: true,
                scrollY: 500
            });
            onLoadingDataTable(@Json.Serialize(Model));
            function ViewLayout(type, url) {
                if (type == "View") {
                    window.open("@Url.Action("ViewDetailBookingSheet", "BookingSheet")?docEntry=" + url, "_blank");
                } else if (type == "Update") {
                    window.open("@Url.Action("EditBookingSheet", "BookingSheet")?docEntry=" + url, "_blank");
                } else if (type == "UpdateCommodities") {
                    window.open("@Url.Action("EditBookingSheetCommodities", "BookingSheet")?docEntry=" + url, "_blank");
                }
            }
            function DeleteBookingSheet(docNum, url, urlPDF) {
                if (confirm("@localizer["Are you sure to Cancel Document ?"]")) {
                    $.ajax({
                        url: '@Url.Action("OnCancelBookingSheet","BookingSheet")',
                        type: "DELETE",
                        data: { docNum: docNum },
                        dataType: "JSON",
                        beforeSend: function () {
                            $('#Modalloder').modal('show');
                        },
                        success: function (data) {
                            $('#Modalloder').modal('hide');
                            $('#ModalSuccess').modal('show');
                            $('#ErrMsg').html("Success");
                            window.location.href = '@Url.Action("ListBookingSheet","BookingSheet")';
                        },
                        error: function (erro) {
                            $('#Modalloder').modal('hide');
                            $('#ModalSuccess').modal('show');
                            $('#ErrMsg').html(erro.responseText);
                        }
                    });
                }
            }
            $("#btnExecuteDate").click(function () {
                $.ajax({
                    url: '@Url.Action("GetListBookingSheet","BookingSheet")',
                    type: "GET",
                    data: {
                        dateFrom: $("#txtDateFrom").val(),
                        dateTo: $("#txtDateTo").val(),
                        value: $("#txtValueSearch").val(),
                        field: 'ALL',
                    },
                    dataType: "JSON",
                    beforeSend: function () {
                        $('#Modalloder').modal('show');
                    },
                    success: function (data) {
                        $('#Modalloder').modal('hide');
                        onLoadingDataTable(data.data);
                    },
                    error: function (erro) {
                        $('#Modalloder').modal('hide');
                        $('#ModalSuccess').modal('show');
                        $('#ErrMsg').html(erro.responseText);
                    }
                });
            });
            function onLoadingDataTable(data) {
                listData = [];
                listData = data;
                var tbListItemLine = $('#TbListBookingSheet').DataTable();
                tbListItemLine.clear();
                tbListItemLine.rows.add(data);
                tbListItemLine.search("").columns().search("").draw();
            }
            $("#btnExportData").click(function () {
                $.ajax({
                    url: '@Url.Action("OnExportDataOfListBookingSheet","BookingSheet")',
                    type: "POST",
                    data: {
                        getBookingSheetExports: JSON.stringify(listData)
                    },
                    dataType: "JSON",
                    beforeSend: function () {
                        $('#Modalloder').modal('show');
                    },
                    success: function (data) {
                        $('#Modalloder').modal('hide');
                        var sampleArr = base64ToArrayBuffer(data.data);
                        saveByteArray(data.fileName, sampleArr, data.applicationType);
                    },
                    error: function (erro) {
                        $('#Modalloder').modal('hide');
                        $('#ModalSuccess').modal('show');
                        $('#ErrMsg').html(erro.responseText);
                    }
                });
            });
            function base64ToArrayBuffer(base64) {
                //var binaryString = window.atob(base64);
                var binaryString = atob(base64);
                var binaryLen = binaryString.length;
                var bytes = new Uint8Array(binaryLen);
                for (var i = 0; i < binaryLen; i++) {
                    bytes[i] = binaryString.charCodeAt(i);
                }
                return bytes.buffer;;
            }
            function saveByteArray(reportName, byte, type) {
                var blob = new Blob([byte], { type: type });
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                var fileName = reportName;
                link.download = fileName;
                link.click();
                link.remove();
            };

                                                                        //var dString = "May, 20, 2023";

                                                                        //var d1 = new Date(dString);
                                                                        //var d2 = new Date();
                                                                        //console.log(DateDiff.inWeeks(d1, d2));
                                                                        //console.log(DateDiff.inMonths(d1, d2));
                                                                        //console.log(DateDiff.inYears(d1, d2));
        </script>
}
}
